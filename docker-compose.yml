services:
  # Backend API Service
  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
    container_name: test-website-backend
    restart: unless-stopped
    environment:
      - NODE_ENV=production
      - PORT=3001
      # Frontend URL for CORS configuration
      - FRONTEND_URL=https://billyziiii.gofun.cloud
      # Backend API URL (for internal reference)
      - API_URL=https://api.billyziiii.gofun.cloud
    # Remove port exposure for Coolify deployment (Traefik handles routing)
    # For local testing, uncomment the ports section below:
    # ports:
    #   - "3001:3001"
    expose:
      - "3001"
    networks:
      - app-network
    # Temporarily disable health check for debugging
    # healthcheck:
    #   test: ["CMD", "node", "-e", "require('http').get('http://localhost:3001/api/health', (res) => { process.exit(res.statusCode === 200 ? 0 : 1) })"]
    #   interval: 30s
    #   timeout: 10s
    #   retries: 3
    #   start_period: 40s

  # Frontend React Service
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
    container_name: test-website-frontend
    restart: unless-stopped
    environment:
      # API URL for frontend to connect to backend
      - REACT_APP_API_URL=https://api.billyziiii.gofun.cloud
      # Alternative: Use internal container communication
      # - REACT_APP_API_URL=http://backend:3001
    # Remove port exposure for Coolify deployment (Traefik handles routing)
    # For local testing, uncomment the ports section below:
    # ports:
    #   - "3000:3000"
    expose:
      - "3000"
    depends_on:
      - backend
    networks:
      - app-network
    # Temporarily disable health check for debugging
    # healthcheck:
    #   test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:3000/"]
    #   interval: 30s
    #   timeout: 10s
    #   retries: 3
    #   start_period: 40s

networks:
  app-network:
    driver: bridge
    name: test-website-network